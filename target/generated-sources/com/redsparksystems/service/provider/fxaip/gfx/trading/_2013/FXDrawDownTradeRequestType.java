//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.04.26 at 01:28:04 PM EDT 
//


package com.redsparksystems.service.provider.fxaip.gfx.trading._2013;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import com.google.common.base.Objects;
import com.tangosol.io.pof.annotation.Portable;
import com.redsparksystems.service.provider.fxaip.base._2013.BuySellIndicatorEnum;
import com.redsparksystems.service.provider.fxaip.base._2013.CurrencyTermEnum;
import com.redsparksystems.service.provider.fxaip.base._2013.EntityType;
import com.redsparksystems.service.provider.fxaip.base._2013.SourceSystemType;
import com.redsparksystems.service.provider.fxaip.base._2013.TenorDateType;
import org.joda.time.LocalDate;


/**
 * Trade Request for booking a FX DrawDown contract
 * 
 * <p>Java class for FXDrawDownTradeRequest_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FXDrawDownTradeRequest_Type">
 *   &lt;complexContent>
 *     &lt;extension base="{http://service.redsparksystems.com/provider/fxaip/gfx/trading/2013/}FXSpotFwdTradeRequest_Type">
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FXDrawDownTradeRequest_Type", namespace = "http://service.redsparksystems.com/provider/fxaip/gfx/trading/2013/")
@Portable
public class FXDrawDownTradeRequestType
    extends FXSpotFwdTradeRequestType
    implements Serializable
{

    private final static long serialVersionUID = 17L;

    @Override
    public String toString() {
        return Objects.toStringHelper(this).add("tradeId", tradeId).add("contractId", contractId).add("contractSeq", contractSeq).add("branch", branch).add("customerId", customerId).add("sourceReferenceId", sourceReferenceId).add("sourceSystem", sourceSystem).add("userId", userId).add("externalRef1", externalRef1).add("externalRef2", externalRef2).add("flipExternalResponse", flipExternalResponse).add("salesCredit", salesCredit).add("coverTradeId", coverTradeId).add("additionalInfo", additionalInfo).add("dealDate", dealDate).add("valueDate", valueDate).add("marketRate", marketRate).add("customerRate", customerRate).add("baseRate", baseRate).add("referenceMidRate", referenceMidRate).add("fixedCurrency", fixedCurrency).add("wfBuyCurrency", wfBuyCurrency).add("wfBuyCurrencyAmt", wfBuyCurrencyAmt).add("wfSellCurrency", wfSellCurrency).add("wfSellCurrencyAmt", wfSellCurrencyAmt).add("currencyTerm", currencyTerm).add("currency", currency).add("ctrCurrency", ctrCurrency).add("currencyAmount", currencyAmount).add("ctrCurrencyAmount", ctrCurrencyAmount).add("wfBuySellIndicator", wfBuySellIndicator).add("portfolio", portfolio).add("traderBook", traderBook).add("dealText", dealText).add("homeCurrency", homeCurrency).toString();
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(tradeId, contractId, contractSeq, branch, customerId, sourceReferenceId, sourceSystem, userId, externalRef1, externalRef2, flipExternalResponse, salesCredit, coverTradeId, additionalInfo, dealDate, valueDate, marketRate, customerRate, baseRate, referenceMidRate, fixedCurrency, wfBuyCurrency, wfBuyCurrencyAmt, wfSellCurrency, wfSellCurrencyAmt, currencyTerm, currency, ctrCurrency, currencyAmount, ctrCurrencyAmount, wfBuySellIndicator, portfolio, traderBook, dealText, homeCurrency);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (getClass()!= other.getClass()) {
            return false;
        }
        final FXDrawDownTradeRequestType o = ((FXDrawDownTradeRequestType) other);
        return ((((((((((((((((((((((((((((((((((Objects.equal(tradeId, o.tradeId)&&Objects.equal(contractId, o.contractId))&&Objects.equal(contractSeq, o.contractSeq))&&Objects.equal(branch, o.branch))&&Objects.equal(customerId, o.customerId))&&Objects.equal(sourceReferenceId, o.sourceReferenceId))&&Objects.equal(sourceSystem, o.sourceSystem))&&Objects.equal(userId, o.userId))&&Objects.equal(externalRef1, o.externalRef1))&&Objects.equal(externalRef2, o.externalRef2))&&Objects.equal(flipExternalResponse, o.flipExternalResponse))&&Objects.equal(salesCredit, o.salesCredit))&&Objects.equal(coverTradeId, o.coverTradeId))&&Objects.equal(additionalInfo, o.additionalInfo))&&Objects.equal(dealDate, o.dealDate))&&Objects.equal(valueDate, o.valueDate))&&Objects.equal(marketRate, o.marketRate))&&Objects.equal(customerRate, o.customerRate))&&Objects.equal(baseRate, o.baseRate))&&Objects.equal(referenceMidRate, o.referenceMidRate))&&Objects.equal(fixedCurrency, o.fixedCurrency))&&Objects.equal(wfBuyCurrency, o.wfBuyCurrency))&&Objects.equal(wfBuyCurrencyAmt, o.wfBuyCurrencyAmt))&&Objects.equal(wfSellCurrency, o.wfSellCurrency))&&Objects.equal(wfSellCurrencyAmt, o.wfSellCurrencyAmt))&&Objects.equal(currencyTerm, o.currencyTerm))&&Objects.equal(currency, o.currency))&&Objects.equal(ctrCurrency, o.ctrCurrency))&&Objects.equal(currencyAmount, o.currencyAmount))&&Objects.equal(ctrCurrencyAmount, o.ctrCurrencyAmount))&&Objects.equal(wfBuySellIndicator, o.wfBuySellIndicator))&&Objects.equal(portfolio, o.portfolio))&&Objects.equal(traderBook, o.traderBook))&&Objects.equal(dealText, o.dealText))&&Objects.equal(homeCurrency, o.homeCurrency));
    }

    @Override
    public FXDrawDownTradeRequestType withDealDate(LocalDate value) {
        setDealDate(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withValueDate(TenorDateType value) {
        setValueDate(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withMarketRate(SpotFwdAllInRateType value) {
        setMarketRate(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCustomerRate(SpotFwdAllInRateType value) {
        setCustomerRate(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withBaseRate(SpotFwdAllInRateType value) {
        setBaseRate(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withReferenceMidRate(SpotFwdAllInRateType value) {
        setReferenceMidRate(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withFixedCurrency(String value) {
        setFixedCurrency(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withWfBuyCurrency(String value) {
        setWfBuyCurrency(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withWfBuyCurrencyAmt(BigDecimal value) {
        setWfBuyCurrencyAmt(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withWfSellCurrency(String value) {
        setWfSellCurrency(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withWfSellCurrencyAmt(BigDecimal value) {
        setWfSellCurrencyAmt(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCurrencyTerm(CurrencyTermEnum value) {
        setCurrencyTerm(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCurrency(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCtrCurrency(String value) {
        setCtrCurrency(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCurrencyAmount(BigDecimal value) {
        setCurrencyAmount(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCtrCurrencyAmount(BigDecimal value) {
        setCtrCurrencyAmount(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withWfBuySellIndicator(BuySellIndicatorEnum value) {
        setWfBuySellIndicator(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withPortfolio(PortfoliosType value) {
        setPortfolio(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withTraderBook(TraderBooksType value) {
        setTraderBook(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withDealText(String value) {
        setDealText(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withHomeCurrency(String value) {
        setHomeCurrency(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withTradeId(BigInteger value) {
        setTradeId(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withContractId(String value) {
        setContractId(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withContractSeq(String value) {
        setContractSeq(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withBranch(String value) {
        setBranch(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCustomerId(EntityType value) {
        setCustomerId(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withSourceReferenceId(String value) {
        setSourceReferenceId(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withSourceSystem(SourceSystemType value) {
        setSourceSystem(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withUserId(EntityType value) {
        setUserId(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withExternalRef1(String value) {
        setExternalRef1(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withExternalRef2(String value) {
        setExternalRef2(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withFlipExternalResponse(Boolean value) {
        setFlipExternalResponse(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withSalesCredit(Boolean value) {
        setSalesCredit(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withCoverTradeId(String value) {
        setCoverTradeId(value);
        return this;
    }

    @Override
    public FXDrawDownTradeRequestType withAdditionalInfo(AdditionalInfoType value) {
        setAdditionalInfo(value);
        return this;
    }

}
