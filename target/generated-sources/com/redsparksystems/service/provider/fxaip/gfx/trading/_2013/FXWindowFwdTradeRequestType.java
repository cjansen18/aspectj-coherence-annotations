//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.04.26 at 01:28:04 PM EDT 
//


package com.redsparksystems.service.provider.fxaip.gfx.trading._2013;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.google.common.base.Objects;
import com.tangosol.io.pof.annotation.Portable;
import com.tangosol.io.pof.annotation.PortableProperty;
import com.redsparksystems.service.provider.fxaip.base._2013.BuySellIndicatorEnum;
import com.redsparksystems.service.provider.fxaip.base._2013.CurrencyTermEnum;
import com.redsparksystems.service.provider.fxaip.base._2013.EntityType;
import com.redsparksystems.service.provider.fxaip.base._2013.SourceSystemType;
import com.redsparksystems.service.provider.fxaip.base._2013.TenorDateType;
import org.joda.time.LocalDate;


/**
 * Trade Request for booking a FX WindowFwd contract
 * 
 * <p>Java class for FXWindowFwdTradeRequest_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FXWindowFwdTradeRequest_Type">
 *   &lt;complexContent>
 *     &lt;extension base="{http://service.redsparksystems.com/provider/fxaip/gfx/trading/2013/}FXSpotFwdTradeRequest_Type">
 *       &lt;sequence>
 *         &lt;element name="optionDate" type="{http://service.redsparksystems.com/provider/fxaip/base/2013/}TenorDate_Type"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FXWindowFwdTradeRequest_Type", namespace = "http://service.redsparksystems.com/provider/fxaip/gfx/trading/2013/", propOrder = {
    "optionDate"
})
@Portable
public class FXWindowFwdTradeRequestType
    extends FXSpotFwdTradeRequestType
    implements Serializable
{

    private final static long serialVersionUID = 17L;
    @XmlElement(required = true)
    @PortableProperty(0)
    protected TenorDateType optionDate;

    /**
     * Gets the value of the optionDate property.
     * 
     * @return
     *     possible object is
     *     {@link TenorDateType }
     *     
     */
    public TenorDateType getOptionDate() {
        return optionDate;
    }

    /**
     * Sets the value of the optionDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link TenorDateType }
     *     
     */
    public void setOptionDate(TenorDateType value) {
        this.optionDate = value;
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(this).add("tradeId", tradeId).add("contractId", contractId).add("contractSeq", contractSeq).add("branch", branch).add("customerId", customerId).add("sourceReferenceId", sourceReferenceId).add("sourceSystem", sourceSystem).add("userId", userId).add("externalRef1", externalRef1).add("externalRef2", externalRef2).add("flipExternalResponse", flipExternalResponse).add("salesCredit", salesCredit).add("coverTradeId", coverTradeId).add("additionalInfo", additionalInfo).add("dealDate", dealDate).add("valueDate", valueDate).add("marketRate", marketRate).add("customerRate", customerRate).add("baseRate", baseRate).add("referenceMidRate", referenceMidRate).add("fixedCurrency", fixedCurrency).add("wfBuyCurrency", wfBuyCurrency).add("wfBuyCurrencyAmt", wfBuyCurrencyAmt).add("wfSellCurrency", wfSellCurrency).add("wfSellCurrencyAmt", wfSellCurrencyAmt).add("currencyTerm", currencyTerm).add("currency", currency).add("ctrCurrency", ctrCurrency).add("currencyAmount", currencyAmount).add("ctrCurrencyAmount", ctrCurrencyAmount).add("wfBuySellIndicator", wfBuySellIndicator).add("portfolio", portfolio).add("traderBook", traderBook).add("dealText", dealText).add("homeCurrency", homeCurrency).add("optionDate", optionDate).toString();
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(tradeId, contractId, contractSeq, branch, customerId, sourceReferenceId, sourceSystem, userId, externalRef1, externalRef2, flipExternalResponse, salesCredit, coverTradeId, additionalInfo, dealDate, valueDate, marketRate, customerRate, baseRate, referenceMidRate, fixedCurrency, wfBuyCurrency, wfBuyCurrencyAmt, wfSellCurrency, wfSellCurrencyAmt, currencyTerm, currency, ctrCurrency, currencyAmount, ctrCurrencyAmount, wfBuySellIndicator, portfolio, traderBook, dealText, homeCurrency, optionDate);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (getClass()!= other.getClass()) {
            return false;
        }
        final FXWindowFwdTradeRequestType o = ((FXWindowFwdTradeRequestType) other);
        return (((((((((((((((((((((((((((((((((((Objects.equal(tradeId, o.tradeId)&&Objects.equal(contractId, o.contractId))&&Objects.equal(contractSeq, o.contractSeq))&&Objects.equal(branch, o.branch))&&Objects.equal(customerId, o.customerId))&&Objects.equal(sourceReferenceId, o.sourceReferenceId))&&Objects.equal(sourceSystem, o.sourceSystem))&&Objects.equal(userId, o.userId))&&Objects.equal(externalRef1, o.externalRef1))&&Objects.equal(externalRef2, o.externalRef2))&&Objects.equal(flipExternalResponse, o.flipExternalResponse))&&Objects.equal(salesCredit, o.salesCredit))&&Objects.equal(coverTradeId, o.coverTradeId))&&Objects.equal(additionalInfo, o.additionalInfo))&&Objects.equal(dealDate, o.dealDate))&&Objects.equal(valueDate, o.valueDate))&&Objects.equal(marketRate, o.marketRate))&&Objects.equal(customerRate, o.customerRate))&&Objects.equal(baseRate, o.baseRate))&&Objects.equal(referenceMidRate, o.referenceMidRate))&&Objects.equal(fixedCurrency, o.fixedCurrency))&&Objects.equal(wfBuyCurrency, o.wfBuyCurrency))&&Objects.equal(wfBuyCurrencyAmt, o.wfBuyCurrencyAmt))&&Objects.equal(wfSellCurrency, o.wfSellCurrency))&&Objects.equal(wfSellCurrencyAmt, o.wfSellCurrencyAmt))&&Objects.equal(currencyTerm, o.currencyTerm))&&Objects.equal(currency, o.currency))&&Objects.equal(ctrCurrency, o.ctrCurrency))&&Objects.equal(currencyAmount, o.currencyAmount))&&Objects.equal(ctrCurrencyAmount, o.ctrCurrencyAmount))&&Objects.equal(wfBuySellIndicator, o.wfBuySellIndicator))&&Objects.equal(portfolio, o.portfolio))&&Objects.equal(traderBook, o.traderBook))&&Objects.equal(dealText, o.dealText))&&Objects.equal(homeCurrency, o.homeCurrency))&&Objects.equal(optionDate, o.optionDate));
    }

    public FXWindowFwdTradeRequestType withOptionDate(TenorDateType value) {
        setOptionDate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withDealDate(LocalDate value) {
        setDealDate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withValueDate(TenorDateType value) {
        setValueDate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withMarketRate(SpotFwdAllInRateType value) {
        setMarketRate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCustomerRate(SpotFwdAllInRateType value) {
        setCustomerRate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withBaseRate(SpotFwdAllInRateType value) {
        setBaseRate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withReferenceMidRate(SpotFwdAllInRateType value) {
        setReferenceMidRate(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withFixedCurrency(String value) {
        setFixedCurrency(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withWfBuyCurrency(String value) {
        setWfBuyCurrency(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withWfBuyCurrencyAmt(BigDecimal value) {
        setWfBuyCurrencyAmt(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withWfSellCurrency(String value) {
        setWfSellCurrency(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withWfSellCurrencyAmt(BigDecimal value) {
        setWfSellCurrencyAmt(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCurrencyTerm(CurrencyTermEnum value) {
        setCurrencyTerm(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCurrency(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCtrCurrency(String value) {
        setCtrCurrency(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCurrencyAmount(BigDecimal value) {
        setCurrencyAmount(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCtrCurrencyAmount(BigDecimal value) {
        setCtrCurrencyAmount(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withWfBuySellIndicator(BuySellIndicatorEnum value) {
        setWfBuySellIndicator(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withPortfolio(PortfoliosType value) {
        setPortfolio(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withTraderBook(TraderBooksType value) {
        setTraderBook(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withDealText(String value) {
        setDealText(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withHomeCurrency(String value) {
        setHomeCurrency(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withTradeId(BigInteger value) {
        setTradeId(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withContractId(String value) {
        setContractId(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withContractSeq(String value) {
        setContractSeq(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withBranch(String value) {
        setBranch(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCustomerId(EntityType value) {
        setCustomerId(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withSourceReferenceId(String value) {
        setSourceReferenceId(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withSourceSystem(SourceSystemType value) {
        setSourceSystem(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withUserId(EntityType value) {
        setUserId(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withExternalRef1(String value) {
        setExternalRef1(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withExternalRef2(String value) {
        setExternalRef2(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withFlipExternalResponse(Boolean value) {
        setFlipExternalResponse(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withSalesCredit(Boolean value) {
        setSalesCredit(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withCoverTradeId(String value) {
        setCoverTradeId(value);
        return this;
    }

    @Override
    public FXWindowFwdTradeRequestType withAdditionalInfo(AdditionalInfoType value) {
        setAdditionalInfo(value);
        return this;
    }

}
