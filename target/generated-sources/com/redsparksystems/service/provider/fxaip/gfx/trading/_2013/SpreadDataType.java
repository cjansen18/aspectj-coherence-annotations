//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.04.26 at 01:28:04 PM EDT 
//


package com.redsparksystems.service.provider.fxaip.gfx.trading._2013;

import java.io.Serializable;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.google.common.base.Objects;
import com.tangosol.io.pof.annotation.Portable;
import com.tangosol.io.pof.annotation.PortableProperty;


/**
 * <p>Java class for SpreadData_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpreadData_Type">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="spot" type="{http://www.w3.org/2001/XMLSchema}decimal"/>
 *         &lt;element name="forward" type="{http://www.w3.org/2001/XMLSchema}decimal"/>
 *         &lt;element name="allIn" type="{http://www.w3.org/2001/XMLSchema}decimal"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpreadData_Type", namespace = "http://service.redsparksystems.com/provider/fxaip/gfx/trading/2013/", propOrder = {
    "spot",
    "forward",
    "allIn"
})
@Portable
public class SpreadDataType implements Serializable
{

    private final static long serialVersionUID = 17L;
    @XmlElement(required = true)
    @PortableProperty(0)
    protected BigDecimal spot;
    @XmlElement(required = true)
    @PortableProperty(1)
    protected BigDecimal forward;
    @XmlElement(required = true)
    @PortableProperty(2)
    protected BigDecimal allIn;

    /**
     * Gets the value of the spot property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSpot() {
        return spot;
    }

    /**
     * Sets the value of the spot property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setSpot(BigDecimal value) {
        this.spot = value;
    }

    /**
     * Gets the value of the forward property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getForward() {
        return forward;
    }

    /**
     * Sets the value of the forward property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setForward(BigDecimal value) {
        this.forward = value;
    }

    /**
     * Gets the value of the allIn property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getAllIn() {
        return allIn;
    }

    /**
     * Sets the value of the allIn property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setAllIn(BigDecimal value) {
        this.allIn = value;
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(this).add("spot", spot).add("forward", forward).add("allIn", allIn).toString();
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(spot, forward, allIn);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (getClass()!= other.getClass()) {
            return false;
        }
        final SpreadDataType o = ((SpreadDataType) other);
        return ((Objects.equal(spot, o.spot)&&Objects.equal(forward, o.forward))&&Objects.equal(allIn, o.allIn));
    }

    public SpreadDataType withSpot(BigDecimal value) {
        setSpot(value);
        return this;
    }

    public SpreadDataType withForward(BigDecimal value) {
        setForward(value);
        return this;
    }

    public SpreadDataType withAllIn(BigDecimal value) {
        setAllIn(value);
        return this;
    }

}
