<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://service.wellsfargo.com/base/2003/" targetNamespace="http://service.wellsfargo.com/base/2003/" elementFormDefault="unqualified" attributeFormDefault="unqualified" version="1.53">
	<!--BASE - WF TYPE-->
	<!-- -->
	<!-- Copyright 2002, 2003, 2009, 2010 Wells Fargo Bank. All rights reserved.-->
	<!-- -->
	<!-- -->
	<!--BEGIN CHANGE HISTORY:-->
	<!--03-11-2010~R. Damlo~Updated annotation in AUNumber_Type and GLEntityNumber_Type-->
	<!--11-24-2009~R. Damlo~Updated pattern and annotation in GLEntityNumber_Type, AUNumber_Type and GLAccountNumber_Type-->
	<!--11-06-2009~R. Damlo~Updated pattern and annotation in HoganProductCode_Type-->
	<!--10-27-2009~R. Damlo~Updated applicationId annotation with current URL-->
	<!--12-16-2008~R. Damlo~Added exception appinfo WF3023 -->
	<!--10-01-2008~R. Damlo~Added exception appinfo WF1822, WF2605, WF2724, WF3180, WF3181; changed annotations to 'our Organization'.  -->
	<!--09/28/2007~M. Dayton~ Deprecated ComputerApplictionCode_Type, replacing it with ApplicationId_Type-->
	<!--09/06/2007~M. Bue~ Added annotations to fix systinet errors.-->
	<!--08/23/2007~R.Damlo~ Added GLAccountNumber_Type-->
	<!--08/15/2007~M. Dayton~ Added GLEntityNumber_Type-->
	<!--07/02/2007~R.Damlo~Added Annotation for line within LineList_Type.-->
	<!--05/03/2007~M. Dayton~Updated EIN, ITIN annotations-->
	<!--11/27/2006~R.Chattanathan~Added RelaxedTaxIdInfo_Type-->
	<!--09/18/2006~R.Damlo~changed decimalFractionDisplayDigitCount to nilleable=true-->
	<!--05/08/2006~Yateesh Bhagavan~P5430~Added a new value (BACK_OFFICE) for the enumerated element DeliveryChannelCode_Enum.-->
	<!--05/01/2006~R.Chattanathan~F8042~Deprecated CountryCodeList_Type-->
	<!--02/07/2006~B.Johnson~F8500~Made decimalFractionDisplayDigitCount type=short, nillable.-->
	<!--02/03/2006~B.Johnson~F8500~Added decimalFractionDisplayDigitCount.-->
	<!--01/27/2006~P.Barber~Added occurrenceNumber.-->
	<!--01/05/2006~M. Dayton~Allow 5 digit company numbers.-->
	<!--11/09/2005~M. Dayton~Updated TINStatusCode_Enum annotation to correct spelling errors -->
	<!--10/03/2005~P.Barber~F7850~Added TaxIdInfo_Type.-->
	<!--10/02/2005~M. Dayton~Updated TINStatusCode_Enum annotations. -->
	<!--08/24/2005~M. Haehn~F7404~Added SWIFTCode_Type-->
	<!--08/01/2005~M. Dayton~Updated ComputerApplicationCode_Type annoation to point to http://erato.wellsfargo.com/asp/appls00.asp-->
	<!--08/01/2005~M. Dayton~F7814~Added CountryCodeList_Type-->
	<!--06/20/2005~M. Dayton~F7850~Added RelaxedTaxId_Type-->
	<!--06/15/2005~M. Dayton~F7074~Added namePrefix to  InternationalName_Type-->
	<!--06/08/2005~J. Wirsig~F7074~Added InternationalName_Type-->
	<!--05/27/2005~M.Dayton~Updated TINStatusCode_Enum annotation-->
	<!--04/18/2004~M.Dayton~Within ExtendedCursorOut_Type, made nextKeyChoice optional -->
	<!--04/12/2004~M.Dayton~Added TaxId_Type-->
	<!--01/19/2005~L.Webster~Added TINStatusCode_Enum-->
	<!--01/18/2005~R. Chattanathan~Added extended cursor types.-->
	<!--07/16/2004~M. Dayton~Country codes should be ISO-3166-1, 2 character codes-->
	<!--03/17/2004~M. Dayton~Updated CompanyNumber_Type annotation.   COID must be 3 digits.-->
	<!--03/11/2004~M. Dayton~Added ABANumber_Type, updated Contact_Center annotation-->
	<!--01/08/2003~M. Dayton~CodeDetail_Type failed to define the type for label and description.-->
	<!--12/17/2003~M. Dayton~Added DataActionCode_Enum-->
	<!--10/15/2003~M. Dayton~Added StringRange_Type-->
	<!--10/13/2003~M. Dayton~Added DeliveryChannelCode_Enum-->
	<!--10/07/2003~M. Dayton~Added EntityName_Type-->
	<!--10/06/2003~M. Dayton~Added NameComponents, NameLine, NameLineList-->
	<!--09/17/2003~M. Dayton~Added LocationId_Type-->
	<!--08/25/2003~M. Dayton~Added HoganProductCode_Type-->
	<!--08/25/2003~M. Dayton~Added OfficerNumber_Type-->
	<!--07/15/2003~M. Dayton~Added ComputerApplicationCode_Type-->
	<!--07/15/2003~M. Dayton~Added BusinessName_Type and name usage codes.-->
	<!--07/14/2003~M. Dayton~Added LineList_Type-->
	<!--07/09/2003~M. Dayton~Added TIN_Type, CountryCode_Type-->
	<!--06/19/2003~M. Dayton~Added Check Digit Type-->
	<!--06/18/2003~M. Dayton~Set nillable=true on elements that map to primitive types.  Changed IntegerRange_Type to xs:int-->
	<!--06-10-2003~M.Dayton~Initial Revision.  Copied from wftype.xsd and bus.xsd-->
	<!--END CHANGE HISTORY:-->
	<!-- -->
	<xs:annotation>
		<xs:documentation>Defines foundation types that  are either specific to our Organization or don't fit natuarlly under a larger foundation subject areas. </xs:documentation>
		<xs:appinfo>
			<myNSPrefix>base</myNSPrefix>
		</xs:appinfo>
	</xs:annotation>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Taxpayer Identification -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="TIN_Type">
		<xs:annotation>
			<xs:documentation>A Taxpayer Id must be 9 digits, with out dashes.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TINType_Enum">
		<xs:annotation>
			<xs:documentation>TINType defines the types of Taxpayer Id's.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="SSN">
				<xs:annotation>
					<xs:documentation>Social Security Number - issued to an individual that is a legal resident of the United States with a format of 999-99-9999.  It is only used for a business when the business is not a Legal Entity.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="EIN">
				<xs:annotation>
					<xs:documentation>An Employer Identification Number (EIN) is also known as a Federal Tax Identification Number, and is used to identify a business entity.    It is a nine-digit number with a  format of 99-9999999.   Prior to 2001, the first two digits of an EIN (the EIN Prefix) indicated the business was located in a particular geographic area. In 2001, EIN assignment was centralized and as a result the EIN prefix no longer has the same significance.  For more information see http://www.irs.gov/businesses/small/article/0,,id=98350,00.html</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ITIN">
				<xs:annotation>
					<xs:documentation>An Individual Taxpayer Identification Number (ITIN) is a tax processing number issued by the Internal Revenue Service. It is a nine-digit number that always begins with the number 9 and has a 7 or 8 in the fourth digit, example 9XX-7X-XXXX.
IRS issues ITINs to individuals who are required to have a U.S. taxpayer identification number but who do not have, and are not eligible to obtain a Social Security Number (SSN) from the Social Security Administration (SSA).
ITINs are issued regardless of immigration status because both resident and nonresident aliens may have U.S. tax return and payment responsibilities under the Internal Revenue Code.    For more information see http://www.irs.gov/individuals/article/0,,id=96287,00.html</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="TaxId_Type">
		<xs:annotation>
			<xs:documentation>Tax Identification must include both the taxIdNumber and type.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="taxIdNumber" type="TIN_Type">
				<xs:annotation>
					<xs:documentation>The Tax Identification Number  is a number or code that aids in identification for tax purposes.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="taxIdType" type="TINType_Enum">
				<xs:annotation>
					<xs:documentation>The Tax Identification Number Type indicates the TIN is either a Social Security Number (SSN), a Employer Identification Number (EIN) or an Individual Taxpayer Identification Number (ITIN).</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RelaxedTaxId_Type">
		<xs:annotation>
			<xs:documentation>Tax Identification should include both the taxIdNumber and type, however the type may not be known.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="taxIdNumber" type="TIN_Type">
				<xs:annotation>
					<xs:documentation>The U.S. Tax Identification Number  is a number or code that aids in identification for tax purposes.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="taxIdType" type="TINType_Enum" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The U.S. Tax Identification Number Type indicates the TIN is either a Social Security Number (SSN), a Employer Identification Number (EIN) or an Individual Taxpayer Identification Number (ITIN).</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="TINStatusCode_Enum">
		<xs:annotation>
			<xs:documentation>TINStatusCode is provided for compatibility with Hogan.   The Hogan TIN Types are 0 = SSN, 1 = EIN, 2 = ITIN, 3 = Non-US Citizen and 4 = Applied For. If Hogan is TIN Type is 0,1,2  the TIN Status is VALID and taxIdType is set to SSN, EIN or ITIN.   If Hogan TIN Type is 3 or 4, then the Tax Id Number is not available (or not provided) and TIN Status is set to NON-US-CITIZEN or APPLIED-FOR respectively</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="VALID">
				<xs:annotation>
					<xs:documentation>The TaxId Number is available and is of type is SSN, EIN or ITIN.  These types correspond to Hogan TIN Type 1,2,3 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="APPLIED">
				<xs:annotation>
					<xs:documentation>No Tax Id Number is available but one has been applied for.  This  values corresponds to Hogan TIN Type 4</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="NON_US_CITIZEN">
				<xs:annotation>
					<xs:documentation>No Tax Id Number is available because the entity is not liable for taxes in the US.  This value corresponds to Hogan TIN Type 3.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="TaxIdInfo_Type">
		<xs:annotation>
			<xs:documentation>Tax Id information.

If taxId is provided, then both the fields taxIdNumber and taxIdType are mandatory else both of these values should not be supplied.  

Additionally if the taxId is provided, the taxIdStatusCode should be 'VALID' else the taxIdStatusCode may be either one of the values: 'NON_US_CITIZEN' or 'APPLIED'.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="taxIdStatusCode" type="TINStatusCode_Enum">
				<xs:annotation>
					<xs:documentation>TINStatusCode is provided for compatibility with Hogan.   The Hogan TIN Types are 0 = SSN, 1 = EIN, 2 = ITIN, 3 = Non-US Citizen and 4 = Applied For. If Hogan is TIN Type is 0,1,2  the TIN Status is VALID and taxIdType is set to SSN, EIN or ITIN.   If Hogan TIN Type is 3 or 4, then the Tax Id Number is not available (or not provided) and TIN Status is set to NON-US-CITIZEN or APPLIED-FOR respectively</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="taxId" type="TaxId_Type" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The Tax Identification Number  is a number or code that aids in identification for tax purposes.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RelaxedTaxIdInfo_Type">
		<xs:annotation>
			<xs:documentation>Tax Id information.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="taxIdStatusCode" type="TINStatusCode_Enum" minOccurs="0">
				<xs:annotation>
					<xs:documentation>TINStatusCode is provided for compatibility with Hogan.  If Hogan TIN Type is 0,1,2 then the taxIdStatusCode is VALID and taxIdType is set to SSN, EIN or ITIN.   If Hogan TIN Type is 3 or 4 and if Tax Id Number is not available (or not provided) then the taxIdStatusCode is set to NON_US_CITIZEN or APPLIED respectively.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="relaxedTaxId" type="RelaxedTaxId_Type" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Tax Identification should include both the taxIdNumber and type, however the type may not be known.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Name-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="NameFormat_Enum">
		<xs:annotation>
			<xs:documentation>Denotes the contents of EntityName</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="STRUCTURED">
				<xs:annotation>
					<xs:documentation>The name is parsed into prefix, first, middle, last and suffix elements.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="FREEFORM">
				<xs:annotation>
					<xs:documentation>The name is unparsed in the fullName element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BOTH">
				<xs:annotation>
					<xs:documentation>Both the fullName element and the strucured elements are present.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="NameLineList_Type">
		<xs:annotation>
			<xs:documentation>A List of 1 - 2 name lines</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="nameLine" type="xs:string" maxOccurs="2">
				<xs:annotation>
					<xs:documentation>An unstructured name line</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="NameComponents_Type">
		<xs:annotation>
			<xs:documentation>The name of an individual  person, parsed into components.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="namePrefix" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The name prefix is the salutation, personal greeting, academic, professional certification, or professional position that is given, earned, or used by an Individual; such as Mr., Ms., Dr, Mayor, Chancellor.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="firstName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The first name is the name that is given to an Individual at birth or adoption.
</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="middleName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The middle name is the second name given to an Individual if they are known by a compound name, not including the Surname. An Individual's middle name may contain multiple names. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="lastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The last name is the part of the name which identifies an Individual's family. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nameSuffix" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The name suffix is the part of a name added at the end to aid in the identification of the named Individual. A suffix, such as Junior or Senior, is often used when two or more people have the same first, middle, and last names</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="EntityName_Type">
		<xs:annotation>
			<xs:documentation>The name of an individual or business.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="format" type="NameFormat_Enum" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The format indicates if    nameComponents is populated (structured), if fullName is populated (freeform) or both.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nameComponents" type="NameComponents_Type" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Name Components is an individuals name broken down into seperate components.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="fullName" type="NameLineList_Type" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Full name consists of one or two freeform name lines.</xs:documentation>
					<xs:appinfo>
						<exception>WF2724</exception>
					</xs:appinfo>
				</xs:annotation>
			</xs:element>
			<xs:element name="phoneticName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identifies the way a name is pronounced, using the sounds of the name.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="IndividualNameUsageCode_Enum">
		<xs:annotation>
			<xs:documentation>A code defining the use of the individual name.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="COMMON">
				<xs:annotation>
					<xs:documentation>Used when an individual has a common name that is different from his/here legal name.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="MAIDEN">
				<xs:annotation>
					<xs:documentation>An individuals name prior to marriage.
</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="FORMER">
				<xs:annotation>
					<xs:documentation>An Individuals former name.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="LEGAL">
				<xs:annotation>
					<xs:documentation>An Individuals legal signature name.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BusinessNameUsageCode_Enum">
		<xs:annotation>
			<xs:documentation>Validate values: A code defining the use of the business name. </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="REGISTERED">
				<xs:annotation>
					<xs:documentation>The business is legally registered with the alternate name.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AKA">
				<xs:annotation>
					<xs:documentation>Also Known As.  The business is refered to as the alternate name.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="LEGAL">
				<xs:annotation>
					<xs:documentation>The official name of the business.   It must be registered with the state.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DBA">
				<xs:annotation>
					<xs:documentation>Doing Business As:  The business has an alternate name, often for a subset of the business.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="IndividualName_Type">
		<xs:annotation>
			<xs:documentation>The name of an individual  person, parsed into components.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="format" type="NameFormat_Enum" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Indicates that the name is in structured format, freeform or both. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="namePrefix" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The name prefix is the salutation, personal greeting, academic, professional certification, or professional position that is given, earned, or used by an Individual; such as Mr., Ms., Dr, Mayor, Chancellor.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="firstName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The first name is the name that is given to an Individual at birth or adoption.
</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="middleName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The middle name is the second name given to an Individual if they are known by a compound name, not including the Surname. An Individual's middle name may contain multiple names. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="lastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The last name is the part of the name which identifies an Individual's family. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nameSuffix" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The name suffix is the part of a name added at the end to aid in the identification of the named Individual. A suffix, such as Junior or Senior, is often used when two or more people have the same first, middle, and last names</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nickName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The nick name is an alternitive name used by the individual </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="phoneticName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identifies the way a name is pronounced, using the sounds of the name.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="fullName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The full name is an unparsed representation of the individual's name prefix, first name, middle name, last name and name suffix.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BusinessName_Type">
		<xs:annotation>
			<xs:documentation>The name of a non-individual entity</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="lineList" type="LineList_Type">
				<xs:annotation>
					<xs:documentation>A business name can have multiple lines.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="phoneticName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identifies the way a name is pronounced, using the sounds of the name.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="InternationalName_Type">
		<xs:annotation>
			<xs:documentation>The name of a foreign individual parsed into components.  There is a template that determines the components used by Country available from ECPR getBenificiaryNameAddressTemplate.
</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="fullName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Name line that consists of an individual components grouped together. Rules for a
grouping may differ for different countries.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="namePrefix" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The name prefix is the salutation, personal greeting, academic, professional certification, or professional position that is given, earned, or used by an Individual; such as Mr., Ms., Dr, Mayor, Chancellor.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="firstName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>First given name.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="middleName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The middle name is the second name given to an Individual if they are known by a compound name, not including the Surname. An Individual's middle name may contain multiple names. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="lastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The last name is the part of the name which identifies an Individual's family. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="marriedLastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The married last name is the part of the name which identifies an Individual's familyafter marriage.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="familyLastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The family last name is the part of the name which identifies an Individual's family. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="maternalLastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The maternal last name is the part of the name which identifies an Individual's family. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="paternalLastName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The paternal last name is the part of the name which identifies an Individual's family. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nameSuffix" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The name suffix is the part of a name added at the end to aid in the identification of the named Individual. A suffix, such as Junior or Senior, is often used when two or more people have the same first, middle, and last names</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!--Banking specific -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="SWIFTCode_Type">
		<xs:annotation>
			<xs:documentation>SWIFT BIC - Bank Identifier Code, that is used to identify financial institutions.  It is commonly referred to as the BIC Code, SWIFT BIC Code, or just SWIFT Code; the terms are synonymous.  It is an 8-alphanumeric field developed by SWIFT,  and "is a unique address which, in telecommunication messages, identifies precisely the financial institutions involved in financial transactions." 
Valid BICs are registered with the ISO 9362 Registration Authority, and consist of eight (8) or eleven (11) contiguous characters comprising the first three or all four of the following components: BANK CODE, COUNTRY CODE, LOCATION CODE, BRANCH CODE. The bank code, country code and location code are mandatory, while the branch code is optional.  For more info, see http://www.exportbureau.com/check_swift_code.html 
</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RTN_Type">
		<xs:annotation>
			<xs:documentation>Routing Transit Number (8 digits plus a check digit)</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{9}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ABANumber_Type">
		<xs:annotation>
			<xs:documentation>An ABA number is 6 digits</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{6}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Wells Fargo specific -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- The PAC2000 Application Mnemonic List is found at:  "http://cbwza3025.wellsfargo.com:7779/reports/rwservlet?pac2000p&report=ast_app_mnem.rep&tolerance=0" -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="ApplicationId_Type">
		<xs:annotation>
			<xs:documentation>An Application Id  is a unique identifier for a Computer Application.   The value is either a 2-char Mainframe Appliccation Id or a 3-5 character Distributed Appliction Id.  The union of the two sets forms the Enterprise Application Id set.   A list of values on the PAC2000 Application Mnemonic Report.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9A-Z]{2,5}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ComputerApplicationCode_Type">
		<xs:annotation>
			<xs:documentation>DEPRECATED: Replaced by ApplicationId_Type.   The value should be a two character computer application code.   A list of values can be found at http://infobank.homestead.wellsfargo.com/aaindex.htm   Note:  May need to expand to allow 5 characters.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9A-Z]{2}"/>
		</xs:restriction>
	</xs:simpleType>
	<!--*** channel ***-->
	<xs:simpleType name="DeliveryChannelCode_Enum">
		<xs:annotation>
			<xs:documentation>The Delivery Channel Code is the value that represents the method by which our Organization makes both information and financial related services available to the user.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="ATM">
				<xs:annotation>
					<xs:documentation>A delivery channel Automated Teller Machine is one that uses a network of specialized  computer terminals as delivery points. The ATM machines are typically  activated by a magnetic card and are used for routine banking transactions, such as withdrawal or deposit of funds, transfer of funds between accounts, etc. The users of the terminals may or may not be internal Customers.  This channel includes transactions made using drive-up ATM machines.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CONTACT_CENTER">
				<xs:annotation>
					<xs:documentation>A delivery channel that is used to communicate with an individual through the phone, email, or postal mail.  This will include interactions with a voice response unit (VRU) as wells as interactions with a Team Member.
</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="INTERNET">
				<xs:annotation>
					<xs:documentation>A delivery channel of Internet provides users access to our financial  services through our Organization's web page on the Internet</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DIRECT_MAIL">
				<xs:annotation>
					<xs:documentation>A delivery channel of Direct Mail is one that is used to send information (outbound)  to the recipient via the US Postal Service and/or electronic mail for sales/promotional and/or service reasons. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DIRECT_SECURED">
				<xs:annotation>
					<xs:documentation>A delivery channel of Direct Secured Access is one that provides customers with access to specific authorized financial services through computers by direct secured connections to our initernal system.  The additional security and authentication to access our network or computer is required from an indirect source.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="STORE">
				<xs:annotation>
					<xs:documentation>A delivery channel of Store is one that is characterized as an interaction with a Team Member in person at one of our locations or at a third party location.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="MOBILE_ACCESS">
				<xs:annotation>
					<xs:documentation>A delivery channel of Mobile Access is one that provides our Team Members with access to the network through our computers by remote connection to our internal system.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DRIVE_UP">
				<xs:annotation>
					<xs:documentation>A delivery channel of Drive Up is one that is characterized by a person interacting with a teller without leaving their automobile.  Typically the teller is located near a  window that is facing the person's atuomobile.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="KIOSK">
				<xs:annotation>
					<xs:documentation>A delivery channel of Kiosk is one that uses computer terminals, typically  housed in a small structure, as delivery points.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BACK_OFFICE">
				<xs:annotation>
					<xs:documentation>A delivery channel of back office is characterized by activities that take place regarding a Party through back office operations.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<!--*** Organization ***-->
	<xs:simpleType name="OfficerNumber_Type">
		<xs:annotation>
			<xs:documentation>An Officer Number is an alternate idenifer for a team member.  The Retail Bank Systems (Hogan/Shaw) use a 5 character alpha-numeric.  Some systems use the HRIS number from PeopleSoft, which is 6 digits.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="((\w{5})|(\d{6}))"/>
		</xs:restriction>
	</xs:simpleType>
	<!--NOTE:  Company Number was expanded to allow 5 digit with the understanding that this would not invalidate any existing services.   Any change in service behavior to take advantage of this new defintion must be considered  non-backward compatible. -->
	<xs:simpleType name="CompanyNumber_Type">
		<xs:annotation>
			<xs:documentation>Company Numbers (COID) are 3 to 5 digits.  Values of less than 100 must have leading zeros.  The specific values for Company Number are maintained on a CIS PCD and can be seen through their web site:  http://dante/idd/hogan_shaw_reference/index.htm.  </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{3,5}"/>
		</xs:restriction>
	</xs:simpleType>
	<!--*** Product ***-->
	<xs:simpleType name="HoganProductCode_Type">
		<xs:annotation>
			<xs:documentation>A Hogan Product Code is three uppercase alpha characters.  The specific values can be found at: http://dante.wellsfargo.com/idd/StorePP/index.asp in 'All Codes', 'Product Codes'. 
</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9A-Z]{3}"/>
		</xs:restriction>
	</xs:simpleType>
	<!--*** Outlet ***-->
	<xs:simpleType name="LocationId_Type">
		<xs:annotation>
			<xs:documentation>A 5 digit identifier for a Location of our Organization.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{5}"/>
		</xs:restriction>
	</xs:simpleType>
	<!--*** General Ledger ***-->
	<xs:simpleType name="GLEntityNumber_Type">
		<xs:annotation>
			<xs:documentation>GL Entity Number is a value that uniquely identifies an General Ledger (GL) Entity within our Organization. It is also known as the Internal Legal Entity.  The values are defined by the General Ledger and consist of any three alpha-numeric characters.  Note that this is different than Hogan Legal Entity, used internally by CIS, which is a 5 digit numeric identifier of which only 3 digits are used today.  
The pattern was changed from 3 positions to 3, 4 or 5 positions as of March 11, 2010 to meet requirements of Project M6639/I0025299 WF GL Integration Phase II.
  </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9A-Z]{3,5}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="AUNumber_Type">
		<xs:annotation>
			<xs:documentation>An Accounting Unit (AU) is a store or department that resides within an a legal organization unit/company within our Organization (Entity).   Accounting Unit numbers are unique within the GL System; that is, once assigned to an entity; an AU number is not reused in any other entity. Account transactions and balances are housed within AUs, which are the lowest level on the organizational hierarchy.  See http://controllers.wellsfargo.com/ for complete AU information.			
The pattern was changed from 5 positions to allow 5, 6 or 7 positions as of March 11, 2010 to meet requirements of Project M6639/I0025299 WF GL Integration Phase II.  
The values '12345', '012345' or '0012345' are semantically the same and middleware applications using this XML Schema Type definition in their business services may or may not pad with zeroes to the left.   
</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{5,7}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="GLAccountNumber_Type">
		<xs:annotation>
			<xs:documentation>The General Ledger Account number represents the financial account that will be used for posting accounting transactions into the general ledger system .

The pattern was changed from 5 positons to 5 to 7 positions as of November 24, 2009 to meet requirement of Project M6639/I0025299 WF GL Integration Phase II.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{5,7}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Identifiers -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="UUID_Type">
		<xs:annotation>
			<xs:documentation>UUID stands for a Universal Unique IDentifier.  These are 128 bit numbers which is guaranteed to be unique.    For more information including algorithms used to create UUIDs, see the expired Internet-Draft UUIDs and GUIDs http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01.txt or the standards body definition  ISO/IEC 11578:1996.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:maxLength value="36"/>
			<xs:pattern value="([0-9]|[a-f]|[A-F]){8}(-([0-9]|[a-f]|[A-F]){4})(-([0-9]|[a-f]|[A-F]){4})(-([0-9]|[a-f]
|[A-F]){4})(-([0-9]|[a-f]|[A-F]){12})"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Mementos-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="Memento_Type">
		<xs:annotation>
			<xs:documentation>Memento is a snapshot of a portion of an object's state so that the object can be restored to that state later, without violating its encapsulation.  Mementos can be passed to and from the client to allow a service provider to reliably use state from a previous request.  They are preferred over HTTP cookies</xs:documentation>
			<xs:appinfo>
				<exception>WF3181</exception>
			</xs:appinfo>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="EncodedValue_Type">
		<xs:annotation>
			<xs:documentation>Represents one or more opaque values that are provided by the system and can be returned on subsequent system calls (e.g. key, cursor, etc.)</xs:documentation>
			<xs:appinfo>
				<exception>WF3181</exception>
			</xs:appinfo>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Cursors-->
	<!-- Cursors are used to split large lists of information over multiple exchanges between the client and service provider.  -->
	<!-- They allow a requestor to retrieve successive sets of  repeating group items or logical records. -->
	<!--  Both sequential keys and non-sequential keys are supported.   -->
	<!-- The service must guarantee a consistently ordered result set.   -->
	<!-- State persistence between requests is maintained by the client and not the service provider.-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="CursorKey_Type">
		<xs:annotation>
			<xs:documentation>Defines an identiy mememto for cursors</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="encodedKey" type="EncodedValue_Type">
				<xs:annotation>
					<xs:documentation>A unique identifier for the next record, provided as an opaque structure. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CursorIn_Type">
		<xs:annotation>
			<xs:documentation>An input cursor. Do not omit both the maxReturn and nextKey elements - one or the other, or both should be set.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="maxReturn" type="xs:int" nillable="true" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies an upper limit on the number of logical records the service should return in.   If not specified, the service returns all remaining records, up to any predefined service limit, starting with next Key.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nextKey" type="CursorKey_Type" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identifies point at which to resume returning items</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CursorOut_Type">
		<xs:annotation>
			<xs:documentation>An output cursor.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="totalAvailable" type="xs:int" nillable="true" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies total number of logical records the service has available, based on the request messages search or filter criteria.   This value may not always be available </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nextKey" type="CursorKey_Type">
				<xs:annotation>
					<xs:documentation>A container whose child element identifies the next record, after the last record in the current response.   This value may be passed in on a subsequent fetch request. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="NextKey_Choice">
		<xs:sequence>
			<xs:element name="nextKey" type="CursorKey_Type" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identifies point at which to resume returning items</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sequenceNumber" type="xs:int" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The sequence number of next row to return.</xs:documentation>
					<xs:appinfo>
						<exception>WF3023</exception>
					</xs:appinfo>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ExtendedCursorIn_Type">
		<xs:annotation>
			<xs:documentation>An extended input cursor. Do not omit both the maxReturn and nextKeyChoice elements - one or the other, or both should be set.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="maxReturn" type="xs:int" nillable="true" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies an upper limit on the number of logical records the service should return in.   If not specified, the service returns all remaining records, up to any predefined service limit, starting with next Key.  </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nextKeyChoice" type="NextKey_Choice" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Send either the nextKey or the sequenceNumber, but not both.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ExtendedCursorOut_Type">
		<xs:annotation>
			<xs:documentation>An extended output cursor.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="totalAvailable" type="xs:int" nillable="true" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies total number of logical records the service has available, based on the request messages search or filter criteria.   This value may not always be available </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nextKeyChoice" type="NextKey_Choice" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Either a nextKey or a sequenceNumber will be returned, by not both.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!--Codes-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="CodeDetail_Type">
		<xs:annotation>
			<xs:documentation>Details about a code value </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="codeValue" type="xs:string">
				<xs:annotation>
					<xs:documentation>The code value</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="label" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>A short label or name for the  value</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="description" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The meaning of the value</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="timestamp" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The date and time the code values was set.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Country Code -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="CountryCode_Type">
		<xs:annotation>
			<xs:documentation>An  ISO 3166-1-alpha-2 code for a Country.  For a list, see http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html .  Note:  3 chararacters are allowed for backwards compatibility.   All new implementations must use the 2 character codes.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:minLength value="2"/>
			<xs:maxLength value="3"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Misc -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="LineList_Type">
		<xs:annotation>
			<xs:documentation>Can be populated with a list of string values.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="line" type="xs:string" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>An individual line within a line list.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="StringRange_Type">
		<xs:annotation>
			<xs:documentation>A open-ended range of strings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="min" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The minimum string, inclusive</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="max" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The maximum string, inclusive.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="IntegerRange_Type">
		<xs:annotation>
			<xs:documentation>A open-ended range of integers</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="min" type="xs:int" nillable="true" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The minimum integer, inclusive</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="max" type="xs:int" nillable="true" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The maximum integer, inclusive.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Triggers_Type">
		<xs:annotation>
			<xs:documentation>Business rule triggers</xs:documentation>
			<xs:appinfo>
				<exception>WF3180</exception>
			</xs:appinfo>
		</xs:annotation>
		<xs:sequence>
			<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="CheckDigit_Type">
		<xs:annotation>
			<xs:documentation>A Check Digit for simple validation</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:short">
			<xs:totalDigits value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DataActionCode_Enum">
		<xs:annotation>
			<xs:documentation>Data Action Code defines standard data actions of Create, Update and Delete.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="CREATE">
				<xs:annotation>
					<xs:documentation>Create action</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="UPDATE">
				<xs:annotation>
					<xs:documentation>Update action</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DELETE">
				<xs:annotation>
					<xs:documentation>Delete action</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="occurrenceNumber" type="xs:int" nillable="true">
		<xs:annotation>
			<xs:documentation>Used as a key or part of a key to uniquely identify an entity.</xs:documentation>
			<xs:appinfo>
				<exception>WF2605</exception>
			</xs:appinfo>
		</xs:annotation>
	</xs:element>
	<xs:element name="decimalFractionDisplayDigitCount" type="xs:short" nillable="true">
		<xs:annotation>
			<xs:documentation>The number of decimal digits to display to the right of the decimal point.</xs:documentation>
			<xs:appinfo>
				<exception>WF1822</exception>
				<exception>WF2605</exception>
			</xs:appinfo>
		</xs:annotation>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- DEPRECATED - DO NOT USE-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="CountryCodeList_Type">
		<xs:annotation>
			<xs:documentation>DEPRECATED. See address2003.xsd.  A list of country codes.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="countryCode" type="CountryCode_Type" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>An  ISO 3166-1-alpha-2 code for a Country.  For a list, see http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html .  Note:  3 chararacters are allowed for backwards compatibility.   All new implementations must use the 2 character codes.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
